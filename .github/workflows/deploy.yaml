name: Deploy to GitHub Pages

# TODO: Add code that will make sure that `base_path = "/szyfrowanie-symetryczne"` is uncommented in `Dioxus.toml` file before building the project.

on:
  push:
    branches:
      - main

jobs:
  deploy-to-pages:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4

      - name: Get latest successful build workflow run ID
        id: get_workflow_run_id
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const workflow_id = 'check-for-build-errors.yaml';
            
            const runs = await github.rest.actions.listWorkflowRunsForRepo({
              owner,
              repo,
              workflow_id,
              status: 'success',
              per_page: 1,
            });
            
            if (runs.data.workflow_runs.length === 0) {
              core.setFailed(`No successful workflow runs found for workflow '${workflow_id}' on branch '${branch}'.`);
              return;
            }
            
            const latestRunId = runs.data.workflow_runs[0].id;
            console.log(`Latest successful build workflow run ID: ${latestRunId}`);
            core.setOutput('run_id', latestRunId);
            
            console.log('Full workflow run data:');
            console.log(JSON.stringify(runs.data.workflow_runs[0], null, 2));
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Debug: List artifacts for the found run ID'
        run: |
          gh run view ${{ steps.get_workflow_run_id.outputs.run_id }} --json artifacts -q '.artifacts'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download build artifacts
        id: download_artifact
        uses: actions/download-artifact@v4
        with:
          name: bundled-web-app
          run-id: ${{ steps.get_workflow_run_id.outputs.run_id }}

      - name: Check if artifact was downloaded
        id: check_artifact
        run: |
          if [ -d "bundled-web-app" ]; then
            echo "build_found=true" >> "$GITHUB_OUTPUT"
          else
            echo "build_found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup Node.js
        if: steps.check_artifact.outputs.build_found == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Node.js dependencies
        if: steps.check_artifact.outputs.build_found == 'false'
        run: npm install
        working-directory: ./

      - name: Setup Rust toolchain
        if: steps.check_artifact.outputs.build_found == 'false'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: wasm32-unknown-unknown

      - name: Install cargo-binstall
        if: steps.check_artifact.outputs.build_found == 'false'
        run: |
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

      - name: Install dioxus-cli
        if: steps.check_artifact.outputs.build_found == 'false'
        run: cargo binstall dioxus-cli --no-confirm

      - name: Generate tailwind file
        if: steps.check_artifact.outputs.build_found == 'false'
        run: npx @tailwindcss/cli -i ./tailwind.css -o ./assets/tailwind.css
        working-directory: ./

      - name: Compile and bundle the project
        if: steps.check_artifact.outputs.build_found == 'false'
        run: dx bundle --platform web --out-dir web-app
        working-directory: ./

      - name: Prepare for deployment
        run: |
          if [ -d "bundled-web-app" ]; then
            echo "Using downloaded build for deployment."
            cp -R bundled-web-app/* web-app/
          else
            echo "Using freshly built application for deployment."
          fi

      - name: Deploy to GitHub Pages
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.GH_PAGES_DEPLOY_TOKEN }}
        with:
          # The output directory from `dx bundle` command
          source-directory: 'web-app/public'
          destination-github-username: 'BenJurewicz'
          destination-repository-name: 'benjurewicz.github.io'
          user-email: 'benjamin.jurewicz204@gmail.com'
          target-branch: 'main'
          target-directory: 'szyfrowanie-symetryczne'
          commit-message: 'Automated deployment for PG-PT-Projekt-Szyfrowanie-Symetryczne-GUI (via GitHub Actions)'